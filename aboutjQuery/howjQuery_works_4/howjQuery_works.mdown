##Callbacks and Functions
Unlike many other programming languages, JavaScript enables you to freely pass functions around to be executed at a later time. *A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.*Callbacks are special because they patiently wait to execute until their parent finishes. Meanwhile, the browser can be executing other functions or doing all sorts of other work.

To use callbacks, it is important to know how to pass them into their parent function.

###Callback without arguments

```javascript
$.get('myhtmlpage.html',myCallBack);
```
When `$.get()` finishes getting the page `myhtmlpage.html`, it executes the `myCallBack()` function. 

**Note:** The second parameter here is simply the function name (but not as a string, and without parentheses).

###Executing callbacks with arguments can be tricky.

This code example will not work:
```javascript
$.get('myhtmlpage.html',myCallBack(param1,param2));
```
The reason this fails is that the code executes `myCallBack( param1, param2 )` immediately and then passes `myCallBack()`'s return value as the second parameter to `$.get()`. 

We actually want to pass the function `myCallBack()`, **not** `myCallBack( param1, param2 )`'s return value (which might or might not be a function). So, how to pass in `myCallBack()` and include its arguments?

To defer executing `myCallBack()` with its parameters, you can use an anonymous function as a wrapper. Note the use of `function() {`. The anonymous function does exactly one thing: calls `myCallBack()`, with the values of `param1` and `param2`.

```javascript
$.get('myhtmlpage.html',function(){
  myCallBack(param1,param2);
});
```